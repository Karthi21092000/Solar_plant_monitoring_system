const uint64_t pipe = 0xE8E8F0F0E1LL;
RF24 radio(CE_PIN, CSN_PIN);
byte data[6]; // depending on the number of sensors used
unsigned long lastReceiveTime = 0;
unsigned long currentTime = 0;
//Above two lines used to detect the transmitted if not detected or connected leads to connection lost.
//Now for ldr defining:
#define MAX_ADC_READING           1023  // 10bit adc 2^10 == 1023
#define ADC_REF_VOLTAGE           5.0 // 5 volts
#define REF_RESISTANCE            994 // 1k resistor 
#define LUX_CALC_SCALAR           12518931 // Formula 
#define LUX_CALC_EXPONENT          -1.405
//For volatge sensor
int offset =0;
//For temeperature sensor:
int Vo;
float R1 = 10000;
float logR2, R2, T, Tc, Tf;
float c1 = 1.009249522e-03, c2 = 2.378405444e-04, c3 = 2.019202697e-07;
void setup()
 {
 Serial.begin(9600);
 delay(1000);
 Serial.println("Nrf24L01 Receiver Starting");
radio.begin();
 radio.openReadingPipe(1,pipe);
 radio.startListening();
 resetData();//function define//
 }
void loop()

 {
   int   ldrRawData;
  float resistorVoltage, ldrVoltage;
  float ldrResistance;
  float ldrLux;
 if ( radio.available() )
 {
 bool done = false;
 while (!done)
 {
 done = 1;
 radio.read( data, sizeof(data) );
 lastReceiveTime = millis(); // At this moment we have received the data
Serial.println(data[0]);
ldrRawData=data[0];
 resistorVoltage = (float)ldrRawData / MAX_ADC_READING * ADC_REF_VOLTAGE;
  ldrVoltage = ADC_REF_VOLTAGE - resistorVoltage;
  ldrResistance = ldrVoltage/resistorVoltage * REF_RESISTANCE;
  ldrLux = LUX_CALC_SCALAR * pow(ldrResistance, LUX_CALC_EXPONENT);
 Serial.print("LDR Raw Data   : "); Serial.println(ldrRawData);
  Serial.print("LDR Voltage    : "); Serial.print(ldrVoltage); Serial.println(" volts");
  Serial.print("LDR Resistance : "); Serial.print(ldrResistance); Serial.println(" Ohms");
  Serial.print("LDR Illuminance: "); Serial.print(ldrLux); Serial.println(" lux");
  Serial.print("Voltage reading");
 int volt=data[1];
double voltage = map(volt,0,1023, 0, 2500) + offset;// map 0-1023 to 0-2500 and add correction offset
  
  voltage /=100;// divide by 100 to get the decimal values
  Serial.print("Voltage: ");
  Serial.print(voltage);
  Serial.println("V");
Vo = analogRead(data[2]);
  R2 = R1 * (1023.0 / (float)Vo - 1.0);
  logR2 = log(R2);
  T = (1.0 / (c1 + c2*logR2 + c3*logR2*logR2*logR2));
  Tc = T - 273.15;
  Tf = (Tc * 9.0)/ 5.0 + 32.0; 

  Serial.print("Temperature: "); 
  Serial.print(Tf);
  Serial.print(" F; ");
  Serial.print(Tc);
  Serial.println(" C");    
  

delay(2000);
}
}
 else
 {
currentTime = millis();
if ( currentTime - lastReceiveTime > 1000 ) { // If current time is more then 1 second since we have recived the last data, that means we have lost connection
resetData(); // If connection is lost, reset the data. It prevents unwanted behavior, for example if a drone has a throttle up and we lose connection, it can keep flying unless we reset the values 
 }
 }
 }

void resetData() 
{
// we are going to place our default code over here. 
Serial.println("Connection Lost");
}

